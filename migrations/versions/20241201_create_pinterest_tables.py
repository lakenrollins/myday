"""create pinterest tables

Revision ID: 20241201_create_pinterest_tables
Revises: 20201120_150602_create_users_table
Create Date: 2024-12-01 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from app.models.db import SCHEMA, environment, add_prefix_for_prod


# revision identifiers, used by Alembic.
revision = '20241201_create_pinterest_tables'
down_revision = 'ffdc0a98111c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Update users table with new fields
    op.add_column('users', sa.Column('first_name', sa.String(length=50), nullable=False, server_default=''))
    op.add_column('users', sa.Column('last_name', sa.String(length=50), nullable=False, server_default=''))
    op.add_column('users', sa.Column('bio', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('avatar_url', sa.String(length=500), nullable=True))
    op.add_column('users', sa.Column('website', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('location', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Create boards table
    op.create_table('boards',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('is_private', sa.Boolean(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], [add_prefix_for_prod('users.id')], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    if environment == "production":
        op.execute(f"ALTER TABLE boards SET SCHEMA {SCHEMA};")
    
    # Create pins table
    op.create_table('pins',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('image_url', sa.String(length=500), nullable=False),
        sa.Column('link', sa.String(length=500), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('board_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['board_id'], [add_prefix_for_prod('boards.id')], ),
        sa.ForeignKeyConstraint(['user_id'], [add_prefix_for_prod('users.id')], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    if environment == "production":
        op.execute(f"ALTER TABLE pins SET SCHEMA {SCHEMA};")
    
    # Create follows table
    op.create_table('follows',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('follower_id', sa.Integer(), nullable=False),
        sa.Column('followed_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.CheckConstraint('follower_id != followed_id', name='no_self_follow'),
        sa.ForeignKeyConstraint(['followed_id'], [add_prefix_for_prod('users.id')], ),
        sa.ForeignKeyConstraint(['follower_id'], [add_prefix_for_prod('users.id')], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('follower_id', 'followed_id', name='unique_follow')
    )
    
    if environment == "production":
        op.execute(f"ALTER TABLE follows SET SCHEMA {SCHEMA};")
    
    # Create likes table
    op.create_table('likes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('pin_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['pin_id'], [add_prefix_for_prod('pins.id')], ),
        sa.ForeignKeyConstraint(['user_id'], [add_prefix_for_prod('users.id')], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'pin_id', name='unique_user_pin_like')
    )
    
    if environment == "production":
        op.execute(f"ALTER TABLE likes SET SCHEMA {SCHEMA};")
    
    # Create comments table
    op.create_table('comments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('pin_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['pin_id'], [add_prefix_for_prod('pins.id')], ),
        sa.ForeignKeyConstraint(['user_id'], [add_prefix_for_prod('users.id')], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    if environment == "production":
        op.execute(f"ALTER TABLE comments SET SCHEMA {SCHEMA};")
    
    # Create board_followers table
    op.create_table('board_followers',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('board_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['board_id'], [add_prefix_for_prod('boards.id')], ),
        sa.ForeignKeyConstraint(['user_id'], [add_prefix_for_prod('users.id')], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'board_id', name='unique_board_follow')
    )
    
    if environment == "production":
        op.execute(f"ALTER TABLE board_followers SET SCHEMA {SCHEMA};")
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('board_followers')
    op.drop_table('comments')
    op.drop_table('likes')
    op.drop_table('follows')
    op.drop_table('pins')
    op.drop_table('boards')
    
    # Remove added columns from users table
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'location')
    op.drop_column('users', 'website')
    op.drop_column('users', 'avatar_url')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'last_name')
    op.drop_column('users', 'first_name')
    # ### end Alembic commands ###